exercice 1 :

#include <iostream>
#include <cmath>
class Complexe {
private:
    double reel;
    double imag;

public:
    Complexe(double r = 0, double i = 0); 
    double getReel();                     
    double getImag();                     
    Complexe operator+(Complexe a);       
    Complexe operator-(Complexe a);       
    Complexe operator*(Complexe a);       
    Complexe operator/(Complexe a);       
    void afficher();                      
};
Complexe::Complexe(double r, double i) : reel(r), imag(i) {}

double Complexe::getReel() {
    return reel;
}

double Complexe::getImag() {
    return imag;
}

Complexe Complexe::operator+(Complexe a) {
    return Complexe(reel + a.reel, imag + a.imag);
}

Complexe Complexe::operator-(Complexe a) {
    return Complexe(reel - a.reel, imag - a.imag);
}

Complexe Complexe::operator*(Complexe a) {
    return Complexe(reel * a.reel - imag * a.imag,
                    reel * a.imag + imag * a.reel);
}

Complexe Complexe::operator/(Complexe a) {
    double denominator = a.reel * a.reel + a.imag * a.imag;
    if (denominator == 0) {
        std::cerr << "Erreur : Division par zéro!" << std::endl;
        return Complexe();
    }
    return Complexe((reel * a.reel + imag * a.imag) / denominator,
                    (imag * a.reel - reel * a.imag) / denominator);
}

void Complexe::afficher() {
    std::cout << reel << (imag >= 0 ? " + " : " - ") << fabs(imag) << "i" << std::endl;
}
int main() {
    double r1, i1, r2, i2;

    std::cout << "Saisir le premier nombre complexe (partie réelle et imaginaire) : ";
    std::cin >> r1 >> i1;
    std::cout << "Saisir le deuxième nombre complexe (partie réelle et imaginaire) : ";
    std::cin >> r2 >> i2;

    Complexe c1(r1, i1), c2(r2, i2);
    int choix;

    do {
        std::cout << "\nMenu d'opérations sur les nombres complexes :\n";
        std::cout << "1. Addition\n";
        std::cout << "2. Soustraction\n";
        std::cout << "3. Multiplication\n";
        std::cout << "4. Division\n";
        std::cout << "5. Quitter\n";
        std::cout << "Choisissez une opération : ";
        std::cin >> choix;

        switch (choix) {
            case 1: {
                Complexe resultat = c1 + c2;
                std::cout << "Résultat de l'addition : ";
                resultat.afficher();
                break;
            }
            case 2: {
                Complexe resultat = c1 - c2;
                std::cout << "Résultat de la soustraction : ";
                resultat.afficher();
                break;
            }
            case 3: {
                Complexe resultat = c1 * c2;
                std::cout << "Résultat de la multiplication : ";
                resultat.afficher();
                break;
            }
            case 4: {
                Complexe resultat = c1 / c2;
                std::cout << "Résultat de la division : ";
                resultat.afficher();
                break;
            }
            case 5:
                std::cout << "Fin du programme." << std::endl;
                break;
            default:
                std::cout << "Choix invalide, veuillez réessayer." << std::endl;
        }
    } while (choix != 5);

    return 0;
}


EVERCICE 2 :


#include <iostream>
#include <string>

class Animal {
protected:
    std::string name;
    int age;

public:
  
    void set_value(std::string n, int a) {
        name = n;
        age = a;
    }
};


class Zebra : public Animal {
private:
    std::string origine; 
public:
   
    Zebra(std::string o) : origine(o) {}

  
    void info() const {
        std::cout << "Zebra Name: " << name << ", Age: " << age 
                  << ", origine: " << origine << std::endl;
    }
};


class Dolphin : public Animal {
private:
    std::string habitat;

public:
    
    Dolphin(std::string h) : habitat(h) {}

    
    void info() const {
        std::cout << "Dolphin Name: " << name << ", Age: " << age 
                  << ", Habitat: " << habitat << std::endl;
    }
};

int main() {
   
    Zebra zebra("afrique de sud");
    Dolphin dolphin("ocean");

    
    zebra.set_value("Alice", 5);
    
    zebra.info();

    dolphin.set_value("dodo", 8);
    
    dolphin.info();

    return 0;
}

EXERCICE 3 :


#include <iostream>
#include <string>
using namespace std;

class Personne {
protected:
    string nom;
    string prenom;
    string date_naissance;

public:
    Personne( string n,  string p,  string date)
        : nom(n), prenom(p), date_naissance(date) {}

    virtual void afficher() const {
        cout << "Nom: " << nom << "\nPrénom: " << prenom 
             << "\nDate de naissance: " << date_naissance << endl;
    }
};

class Employe : public Personne {
protected:
    float salaire;

public:
  
    Employe( string n, string p,  string date, float sal)
        : Personne(n, p, date), salaire(sal) {}

    
    void afficher() {
        Personne::afficher(); 
        cout << "Salaire: " << salaire << endl;
    }
};

class Chef : public Employe {
protected:
    string service;

public:
   
    Chef( string n,  string p, string date, float sal, string serv)
        : Employe(n, p, date, sal), service(serv) {}

   
    void afficher() {
        Employe::afficher(); // Appel de la méthode de la classe de base
        cout << "Service: " << service << endl;
    }
};

class Directeur : public Chef {
private:
    string societe;

public:
   
    Directeur(string n, string p, string date, float sal,  string serv,  string soc)
        : Chef(n, p, date, sal, serv), societe(soc) {}

    
    void afficher() {
        Chef::afficher(); 
        cout << "Société: " << societe << endl;
    }
};

int main() {
    Directeur d("lwis", "Omar", "01/01/1995", 7000.0, "Informatique", "TechAvenir");
    d.afficher();

    return 0;
}

EVERCICE 4 :


#include <iostream>
#include <cmath> 
using namespace std;

class Vecteur3D {
private:
    float x, y, z;

public:

    Vecteur3D(float x = 0, float y = 0, float z = 0) : x(x), y(y), z(z) {}

    
    void afficher() const {
        cout << "(" << x << ", " << y << ", " << z << ")" << endl;
    }

    
    Vecteur3D somme(const Vecteur3D& v) const {
        return Vecteur3D(x + v.x, y + v.y, z + v.z);
    }

    
    float produitScalaire(const Vecteur3D& v) const {
        return (x * v.x + y * v.y + z * v.z);
    }

 
    bool coincide(const Vecteur3D& v) const {
        return (x == v.x && y == v.y && z == v.z);
    }

    
    float norme() const {
        return sqrt(x * x + y * y + z * z);
    }

   
    void normeAdresse(float* resultat) const {
        *resultat = norme();
    }

   
    void normeReference(float& resultat) const {
        resultat = norme(); 
    }

  
    static Vecteur3D normax(const Vecteur3D& v1, const Vecteur3D& v2) {
        return (v1.norme() > v2.norme()) ? v1 : v2;
    }
};

int main() {
    Vecteur3D v1(1.0, 2.0, 3.0);
    Vecteur3D v2(4.0, 5.0, 6.0);

    
    cout << "Vecteur 1: ";
    v1.afficher();
    cout << "Vecteur 2: ";
    v2.afficher();

   
    Vecteur3D vSomme = v1.somme(v2);
    cout << "Somme des vecteurs: ";
    vSomme.afficher();

   
    float produit = v1.produitScalaire(v2);
    cout << "Produit scalaire: " << produit << endl;

   
    bool estCoincide = v1.coincide(v2);
    cout << "Les vecteurs coïncident: " << (estCoincide ? "Oui" : "Non") << endl;

   
    float normeV1 = v1.norme();
    cout << "Norme du vecteur 1: " << normeV1 << endl;

    
    Vecteur3D vecteurMax = Vecteur3D::normax(v1, v2);
    cout << "Vecteur avec la plus grande norme: ";
    vecteurMax.afficher();

   
    float normeResultat;
    v1.normeAdresse(&normeResultat);
    cout << "Norme du vecteur 1 (par adresse): " << normeResultat << endl;

   
    float normeResultatRef;
    v1.normeReference(normeResultatRef);
    cout << "Norme du vecteur 1 (par référence): " << normeResultatRef << endl;

    return 0;
}


/EXERCICE 5 /

#include <iostream>
using namespace std ;
class test {
	public:
	bool call ();

};
bool test :: call(){
	static int cmp = 0;
	cmp++;
	cout << "la fonction call a ete appelee "<< cmp << " fois" <<endl;
return true ;
}
int main() {
	test t;

 for (int i = 0; i < 17; i++) {
        t.call();
    }

return 0 ;
}

/ EXERCICE 6 /
/compulation cpp.h/

 #ifndef Point_H_INCLUDED
#define Point_H_INCLUDED
class Point {
private:
    float x;
    float y;

public:
    Point(float a = 10.6, float b = 5.4) : x(a), y(b) {}

    void deplace(float dx, float dy);
    void afficher() const;
};
#endif 

/compulation cpp.cpp/

#include"compulation cpp.h"
#include<iostream>
using namespace std;

void Point::deplace(float dx, float dy) {
    x += dx;
    y += dy;
}

void Point::afficher() const {
    cout << "Les coordonnées cartesiennes du point : P(" << x << ", " << y << ")" << endl;
}

/testcompulation cpp.cpp/

#include"Point.h"
#include<iostream>
using namespace std;

int main() {
    Point p;
    p.afficher();
     float dx,dy;
    cout << "Entrer par combien vous voulez deplacer le point (dx, dy) : ";
    cin >> dx >> dy;
    
    p.deplace(dx, dy);
    p.afficher();

    return 0;
}

/EXERCICE 7 /

#include <iostream>
using namespace std;

struct Noeud {
    int donnee;
    Noeud *suivant;
    Noeud(int d) : donnee(d), suivant( nullptr) {}
};

class Pile {
private:
    Noeud *sommet;

public:
    Pile();
    ~Pile();
    void push(int valeur);
    int pop();
    bool estVide();
};

Pile::Pile() : sommet(nullptr) {}

Pile::~Pile() {
    while (!estVide()) {
        pop();
    }
}

void Pile::push(int valeur) {
    Noeud* nouveauElement = new Noeud(valeur);
    nouveauElement->suivant = sommet;
    sommet = nouveauElement;
}

int Pile::pop() {
    if (estVide()) {
        cout << "La pile est vide, rien à dépiler." << endl;
        return -1;
    }
    Noeud* temp = sommet;
    int valeur = temp->donnee;
    sommet = sommet->suivant;
    delete temp;
    return valeur;
}

bool Pile::estVide() {
    return sommet == nullptr;
}

int main() {
    Pile p1;
    Pile p2;
    int n1, n2;

    cout << "Combien d'éléments voulez-vous empiler dans la première pile (p1) ? ";
    cin >> n1;
    cout << "Entrez " << n1 << " valeurs entières pour p1 : ";
    for (int i = 0; i < n1; i++) {
        int valeur;
        cin >> valeur;
        p1.push(valeur);
    }

    cout << "Combien d'éléments voulez-vous empiler dans la deuxième pile (p2) ? ";
    cin >> n2;
    cout << "Entrez " << n2 << " valeurs entières pour p2 : ";
    for (int i = 0; i < n2; i++) {
        int valeur;
        cin >> valeur;
        p2.push(valeur);
    }

    cout << "Éléments dépilés de p1: " << endl;
    for (int i = 0; i < n1; i++) {
        cout << p1.pop() << endl;
    }

    cout << "Éléments dépilés de p2: " << endl;
    for (int i = 0; i < n2; i++) {
        cout << p2.pop() << endl;
    }

    return 0;
}

/EXERCICE 8/

#include <iostream>
#include <cstring>
using namespace std;

class fichier {
private:
    char *p;
    size_t longueur;

public:
    fichier() {
        p = NULL;
        longueur = 0;
    }
    void creation(size_t taille);
    void remplir();
    void afficher();

    ~fichier() {
        delete[] p;
        cout << "memoire liberee" << endl;
    }
};

void fichier::creation(size_t taille) {
    longueur = taille;
    p = new char[longueur];
    cout << "la memoire est allouee" << endl;
}

void fichier::remplir() {
    if (p != NULL) {
        memset(p, 'A', longueur);
        p[longueur - 1] = '\0';
        cout << "memoire remplie avec des donnees" << endl;
    } else {
        cout << "espace memoire non alloue" << endl;
    }
}

void fichier::afficher() {
    if (p != NULL) {
        cout << p << endl;
    } else {
        cout << "espace memoire non alloue" << endl;
    }
}

int main() {
    fichier *f = new fichier();
    f->creation(17);
    f->remplir();
    f->afficher();
    delete f;

    return 0;
}


/EXERCICE 9 /

#include<iostream>
using namespace std ;
 struct element {
 	int data;
 	element* next ;
 	
element(int valeur ){
	data = valeur ;
	next = NULL ;
   }
};

class liste {
	private:
		element* head ;
	public:
liste(){
	head = NULL ;
}
void ajouter(int valeur);
void supprimer();
void afficher();
~liste(){
	while(head!=NULL){
		supprimer();
	}
}
};
void  liste :: ajouter(int valeur){
   
	element* nouveaux = new element(valeur);
	nouveaux->next = head ;
    head = nouveaux ;
}

void liste :: supprimer(){
	if (head!=NULL){
	
	element* temp=head;
	head=temp->next;
	delete temp;
	}
	else {
		cout << "la liste est vide"<<endl;
	}	
}
void liste :: afficher(){
	element* ptr = head ;
	if(ptr==NULL){
	cout<<"la liste est vide"<<endl;
	return;
	}
	
	while(ptr != NULL){
		cout<<ptr->data<<"->";
		ptr=ptr->next;
	}
	    cout<<"fin de la liste"<<endl;
}
int main(){

	liste l ;
cout<<"remplissant la liste"<<endl;	
l.ajouter(15);
l.ajouter(19);
l.ajouter(18);
l.ajouter(7);
cout<<"affichant la liste"<<endl;
l.afficher();
cout<<"supprimant un element"<<endl;
l.supprimer();
cout<<"affichant la liste"<<endl;
l.afficher();

return 0 ;
}

/EXERCICE 10 /

#include <iostream>
#include <string>
using namespace std;

int main() {
    string dateHeure;
    
    cout << "Entrez la date et l'heure sous la forme JJMMAAAAHHNN : ";
    cin >> dateHeure;

    if (dateHeure.length() != 12) {
        cout << "Format invalide. Veuillez entrer exactement 12 chiffres." << endl;
        return 1;
    }

   
    string jour = dateHeure.substr(0, 2);
    string mois = dateHeure.substr(2, 2);
    string annee = dateHeure.substr(4, 4);
    string heure = dateHeure.substr(8, 2);
    string minutes = dateHeure.substr(10, 2);

    
    int jourInt = stoi(jour);
    int moisInt = stoi(mois);

    
    string nomsMois[] = {
        "janvier", "février", "mars", "avril",
        "mai", "juin", "juillet", "août",
        "septembre", "octobre", "novembre", "décembre"
    };

    +
    cout << "Date : " << jourInt << " " << nomsMois[moisInt] << " " << annee << endl;
    cout << "Heure : " << heure << ":" << minutes << endl;

    return 0;
}

/EXERCICE 11 /

#include <iostream>
#include <vector>

class Traitement {
private:
    std::vector<int> valeurs;

public:
    void Initialise();
    void show(int index = 0) const;
    void trier();
    
    friend double moyenne(const Traitement& t);
    friend double mediane(Traitement& t);
};

void Traitement::Initialise() {
    int nombre;
    std::cout << "Veuillez saisir 15 entiers pairs non nuls :" << std::endl;

    while (valeurs.size() < 15) {
        std::cout << "Entier numéro " << (valeurs.size() + 1) << " : ";
        std::cin >> nombre;

        if (std::cin.fail() || nombre == 0 || nombre % 2 != 0) {
            std::cin.clear();
            std::cin.ignore(1000, '\n');
            std::cout << "Erreur : veuillez entrer un entier pair non nul." << std::endl;
        } else {
            valeurs.push_back(nombre);
        }
    }
}

void Traitement::show(int index) const {
    if (index < valeurs.size()) {
        std::cout << valeurs[index] << " ";
        show(index + 1);
    } else if (index == 0) {
        std::cout << "Le vecteur est vide." << std::endl;
    } else {
        std::cout << std::endl;
    }
}

void Traitement::trier() {
    int n = valeurs.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (valeurs[j] > valeurs[j + 1]) {
                int temp = valeurs[j];
                valeurs[j] = valeurs[j + 1];
                valeurs[j + 1] = temp;
            }
        }
    }
}

double moyenne(const Traitement& t) {
    if (t.valeurs.empty()) return 0.0;

    int somme = 0;
    for (int valeur : t.valeurs) {
        somme += valeur;
    }
    return static_cast<double>(somme) / t.valeurs.size();
}

double mediane(Traitement& t) {
    if (t.valeurs.empty()) return 0.0;

    t.trier(); // Assurez-vous que les valeurs sont triées avant de calculer la médiane
    int n = t.valeurs.size();

    if (n % 2 != 0) {
        return t.valeurs[n / 2];
    }
    return (t.valeurs[n / 2 - 1] + t.valeurs[n / 2]) / 2.0;
}

int main() {
    Traitement tr;
    tr.Initialise();
    
    std::cout << "Les valeurs dans le vecteur sont : ";
    tr.show();

    std::cout << "Moyenne des valeurs : " << moyenne(tr) << std::endl;
    std::cout << "Médiane des valeurs : " << mediane(tr) << std::endl;

    return 0;
}

